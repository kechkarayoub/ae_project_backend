# -*- coding: utf-8 -*-
# Generated by Django 1.11 on 2019-12-28 15:49
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Item',
            fields=[
                ('added_field_1_label', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 label')),
                ('added_field_1_label_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 label')),
                ('added_field_1_label_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 label')),
                ('added_field_1_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 value')),
                ('added_field_1_value_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 value')),
                ('added_field_1_value_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 1 value')),
                ('added_field_2_label', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 label')),
                ('added_field_2_label_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 label')),
                ('added_field_2_label_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 label')),
                ('added_field_2_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 value')),
                ('added_field_2_value_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 value')),
                ('added_field_2_value_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 2 value')),
                ('added_field_3_label', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 label')),
                ('added_field_3_label_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 label')),
                ('added_field_3_label_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 label')),
                ('added_field_3_value', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 value')),
                ('added_field_3_value_en', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 value')),
                ('added_field_3_value_fr', models.CharField(blank=True, max_length=255, null=True, verbose_name='Added field 3 value')),
                ('address', models.CharField(max_length=510, verbose_name='Address')),
                ('address_en', models.CharField(max_length=510, null=True, verbose_name='Address')),
                ('address_fr', models.CharField(max_length=510, null=True, verbose_name='Address')),
                ('annual_income', models.DecimalField(blank=True, decimal_places=0, max_digits=9, null=True, verbose_name='Annual incomes ($)')),
                ('apartments_number', models.PositiveIntegerField(blank=True, null=True, verbose_name='Apartments number')),
                ('bathrooms_number', models.CharField(blank=True, choices=[('', 'Select a number'), ('1', '1'), ('2', '2'), ('3_', '3 and more')], default='', max_length=10, verbose_name='Bathrooms number')),
                ('bedrooms_number', models.CharField(blank=True, choices=[('', 'Select a number'), ('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5_', '5 and more')], default='', max_length=10, verbose_name='Bedrooms number')),
                ('building_type', models.CharField(blank=True, choices=[('', 'Select a type'), ('detached', 'Detached'), ('semi_detached', 'Semi detached'), ('attached', 'Attached'), ('attached_corner_unit', 'Attached corner unit'), ('quadrex', 'Quadrex')], default='', max_length=50, verbose_name='Building type')),
                ('ccd', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Ccd (CCD)')),
                ('city', models.CharField(choices=[('', 'Select city'), ('abbotsford', 'Abbotsford'), ('acton_vale', 'Acton Vale'), ('airdrie', 'Airdrie'), ('alma', 'Alma'), ('amos', 'Amos'), ('amqui', 'Amqui'), ('armstrong', 'Armstrong'), ('asbestos', 'Asbestos'), ('baie_comeau', 'Baie-Comeau'), ('baie_d_urfe', "Baie-D'Urfé"), ('baie_saint_paul', 'Baie-Saint-Paul'), ('barkmere', 'Barkmere'), ('barrie', 'Barrie'), ('bathurst', 'Bathurst'), ('beaconsfield', 'Beaconsfield'), ('beauceville', 'Beauceville'), ('beauharnois', 'Beauharnois'), ('beaumont', 'Beaumont'), ('beaupre', 'Beaupré'), ('becancour', 'Bécancour'), ('bedford', 'Bedford'), ('belleterre', 'Belleterre'), ('belleville', 'Belleville'), ('beloeil', 'Beloeil'), ('berthierville', 'Berthierville'), ('blainville', 'Blainville'), ('boisbriand', 'Boisbriand'), ('bois_des_filion', 'Bois-des-Filion'), ('bonaventure', 'Bonaventure'), ('boucherville', 'Boucherville'), ('brampton', 'Brampton'), ('brandon', 'Brandon'), ('brant', 'Brant'), ('brantford', 'Brantford'), ('brockville', 'Brockville'), ('brome_lake', 'Brome Lake'), ('bromont', 'Bromont'), ('brooks', 'Brooks'), ('brossard', 'Brossard'), ('brownsburg_chatham', 'Brownsburg-Chatham'), ('burlington', 'Burlington'), ('burnaby', 'Burnaby'), ('calgary', 'Calgary'), ('cambridge', 'Cambridge'), ('campbell_river', 'Campbell River'), ('campbellton', 'Campbellton'), ('camrose', 'Camrose'), ('candiac', 'Candiac'), ('cap_chat', 'Cap-Chat'), ('cap_sante', 'Cap-Santé'), ('carleton_sur_mer', 'Carleton-sur-Mer'), ('carignan', 'Carignan'), ('castlegar', 'Castlegar'), ('causapscal', 'Causapscal'), ('chambly', 'Chambly'), ('chandler', 'Chandler'), ('chapais', 'Chapais'), ('charlemagne', 'Charlemagne'), ('charlottetown', 'Charlottetown'), ('chateau_richer', 'Château-Richer'), ('chateauguay', 'Châteauguay'), ('chestermere', 'Chestermere'), ('chilliwack', 'Chilliwack'), ('chibougamau', 'Chibougamau'), ('clarence_rockland', 'Clarence-Rockland'), ('clermont', 'Clermont'), ('coaticook', 'Coaticook'), ('cold_lake', 'Cold Lake'), ('colwood', 'Colwood'), ('contrecoeur', 'Contrecoeur'), ('cookshire_eaton', 'Cookshire-Eaton'), ('coquitlam', 'Coquitlam'), ('corner_brook', 'Corner Brook'), ('cornwall', 'Cornwall'), ('cote_saint_luc', 'Côte Saint-Luc'), ('coteau_du_lac', 'Coteau-du-Lac'), ('courtenay', 'Courtenay'), ('cowansville', 'Cowansville'), ('cranbrook', 'Cranbrook'), ('danville', 'Danville'), ('dauphin', 'Dauphin'), ('daveluyville', 'Daveluyville'), ('dawson_creek', 'Dawson Creek'), ('degelis', 'Dégelis'), ('delson', 'Delson'), ('delta', 'Delta'), ('desbiens', 'Desbiens'), ('deux_montagnes', 'Deux-Montagnes'), ('dieppe', 'Dieppe'), ('disraeli', 'Disraeli'), ('dolbeau_mistassini', 'Dolbeau-Mistassini'), ('dollard_des_ormeaux', 'Dollard-des-Ormeaux'), ('donnacona', 'Donnacona'), ('dorval', 'Dorval'), ('drummondville', 'Drummondville'), ('dryden', 'Dryden'), ('duncan', 'Duncan'), ('dunham', 'Dunham'), ('duparquet', 'Duparquet'), ('east_angus', 'East Angus'), ('edmonton', 'Edmonton'), ('edmundston', 'Edmundston'), ('elliot_lake', 'Elliot Lake'), ('enderby', 'Enderby'), ('esterel', 'Estérel'), ('estevan', 'Estevan'), ('farnham', 'Farnham'), ('fermont', 'Fermont'), ('fernie', 'Fernie'), ('flin_flon', 'Flin Flon'), ('forestville', 'Forestville'), ('fort_saskatchewan', 'Fort Saskatchewan'), ('fort_st_john', 'Fort St. John'), ('fossambault_sur_le_lac', 'Fossambault-sur-le-Lac'), ('fredericton', 'Fredericton'), ('gaspe', 'Gaspé'), ('gatineau', 'Gatineau'), ('gracefield', 'Gracefield'), ('granby', 'Granby'), ('grand_forks', 'Grand Forks'), ('grande_prairie', 'Grande Prairie'), ('grande_riviere', 'Grande-Rivière'), ('greater_sudbury', 'Greater Sudbury'), ('greenwood', 'Greenwood'), ('guelph', 'Guelph'), ('haldimand_county', 'Haldimand County'), ('hamilton', 'Hamilton'), ('hampstead', 'Hampstead'), ('hudson', 'Hudson'), ('humboldt', 'Humboldt'), ('huntingdon', 'Huntingdon'), ('iqaluit', 'Iqaluit'), ('joliette', 'Joliette'), ('kamloops', 'Kamloops'), ('kawartha_lakes', 'Kawartha Lakes'), ('kelowna', 'Kelowna'), ('kenora', 'Kenora'), ('kimberley', 'Kimberley'), ('kingsey_falls', 'Kingsey Falls'), ('kingston', 'Kingston'), ('kirkland', 'Kirkland'), ('kitchener', 'Kitchener'), ('l_ancienne_lorette', "L'Ancienne-Lorette"), ('l_assomption', "L'Assomption"), ('l_epiphanie', "L'Épiphanie"), ('l_ile_cadieux', "L'Île-Cadieux"), ('l_ile_dorval', "L'Île-Dorval"), ('l_ile_perrot', "L'Île-Perrot"), ('la_malbaie', 'La Malbaie'), ('la_pocatiere', 'La Pocatière'), ('la_prairie', 'La Prairie'), ('la_sarre', 'La Sarre'), ('la_tuque', 'La Tuque'), ('lac_delage', 'Lac-Delage'), ('lac_megantic', 'Lac-Mégantic'), ('lac_saint_joseph', 'Lac-Saint-Joseph'), ('lac_sergent', 'Lac-Sergent'), ('lachute', 'Lachute'), ('lacombe', 'Lacombe'), ('langford', 'Langford'), ('langley', 'Langley'), ('laval', 'Laval'), ('lavaltrie', 'Lavaltrie'), ('lebel_sur_quevillon', 'Lebel-sur-Quévillon'), ('leduc', 'Leduc'), ('lery', 'Léry'), ('levis', 'Lévis'), ('lethbridge', 'Lethbridge'), ('lloydminster', 'Lloydminster'), ('london', 'London'), ('longueuil', 'Longueuil'), ('lorraine', 'Lorraine'), ('louiseville', 'Louiseville'), ('macamic', 'Macamic'), ('magog', 'Magog'), ('malartic', 'Malartic'), ('maniwaki', 'Maniwaki'), ('maple_ridge', 'Maple Ridge'), ('marieville', 'Marieville'), ('markham', 'Markham'), ('martensville', 'Martensville'), ('mascouche', 'Mascouche'), ('matagami', 'Matagami'), ('matane', 'Matane'), ('medicine_hat', 'Medicine Hat'), ('meadow_lake', 'Meadow Lake'), ('melfort', 'Melfort'), ('melville', 'Melville'), ('mercier', 'Mercier'), ('merritt', 'Merritt'), ('metabetchouan_lac_a_la_croix', 'Métabetchouan–Lac-à-la-Croix'), ('metis_sur_mer', 'Métis-sur-Mer'), ('mirabel', 'Mirabel'), ('miramichi', 'Miramichi'), ('mississauga', 'Mississauga'), ('moncton', 'Moncton'), ('mont_joli', 'Mont-Joli'), ('mont_laurier', 'Mont-Laurier'), ('montmagny', 'Montmagny'), ('montreal', 'Montreal'), ('montreal_west', 'Montreal West'), ('montreal_est', 'Montreal-East'), ('mont_saint_hilaire', 'Mont-Saint-Hilaire'), ('mont_tremblant', 'Mont-Tremblant'), ('moose_jaw', 'Moose Jaw'), ('morden', 'Morden'), ('mount_royal', 'Mount Royal'), ('mount_pearl', 'Mount Pearl'), ('murdochville', 'Murdochville'), ('nanaimo', 'Nanaimo'), ('nelson', 'Nelson'), ('neuville', 'Neuville'), ('new_richmond', 'New Richmond'), ('new_westminster', 'New Westminster'), ('niagara_falls', 'Niagara Falls'), ('nicolet', 'Nicolet'), ('norfolk_county', 'Norfolk County'), ('normandin', 'Normandin'), ('north_bay', 'North Bay'), ('north_battleford', 'North Battleford'), ('north_vancouver', 'North Vancouver'), ('notre_dame_de_l_ile_perrot', "Notre-Dame-de-l'Île-Perrot"), ('notre_dame_des_prairies', 'Notre-Dame-des-Prairies'), ('orillia', 'Orillia'), ('oshawa', 'Oshawa'), ('ottawa', 'Ottawa'), ('otterburn_park', 'Otterburn Park'), ('owen_sound', 'Owen Sound'), ('parksville', 'Parksville'), ('paspebiac', 'Paspébiac'), ('pembroke', 'Pembroke'), ('penticton', 'Penticton'), ('perce', 'Percé'), ('peterborough', 'Peterborough'), ('pickering', 'Pickering'), ('pincourt', 'Pincourt'), ('pitt_meadows', 'Pitt Meadows'), ('plessisville', 'Plessisville'), ('pohenegamook', 'Pohénégamook'), ('pointe_claire', 'Pointe-Claire'), ('pont_rouge', 'Pont-Rouge'), ('port_alberni', 'Port Alberni'), ('port_cartier', 'Port-Cartier'), ('port_colborne', 'Port Colborne'), ('port_coquitlam', 'Port Coquitlam'), ('port_moody', 'Port Moody'), ('portneuf', 'Portneuf'), ('portage_la_prairie', 'Portage la Prairie'), ('powell_river', 'Powell River'), ('prevost', 'Prévost'), ('prince_albert', 'Prince Albert'), ('prince_edward_county', 'Prince Edward County'), ('prince_george', 'Prince George'), ('prince_rupert', 'Prince Rupert'), ('princeville', 'Princeville'), ('quebec', 'Quebec'), ('quesnel', 'Quesnel'), ('quinte_west', 'Quinte West'), ('red_deer', 'Red Deer'), ('regina', 'Regina'), ('repentigny', 'Repentigny'), ('revelstoke', 'Revelstoke'), ('richelieu', 'Richelieu'), ('richmond', 'Richmond'), ('richmond_hill', 'Richmond Hill'), ('rimouski', 'Rimouski'), ('riviere_du_loup', 'Rivière-du-Loup'), ('riviere_rouge', 'Rivière-Rouge'), ('roberval', 'Roberval'), ('rosemere', 'Rosemère'), ('rossland', 'Rossland'), ('rouyn_noranda', 'Rouyn-Noranda'), ('saguenay', 'Saguenay'), ('saint_augustin_de_desmaures', 'Saint-Augustin-de-Desmaures'), ('saint_basile', 'Saint-Basile'), ('saint_basile_le_grand', 'Saint-Basile-le-Grand'), ('saint_bruno_de_montarville', 'Saint-Bruno-de-Montarville'), ('saint_cesaire', 'Saint-Césaire'), ('saint_colomban', 'Saint-Colomban'), ('saint_constant', 'Saint-Constant'), ('saint_eustache', 'Saint-Eustache'), ('saint_felicien', 'Saint-Félicien'), ('saint_gabriel', 'Saint-Gabriel'), ('saint_georges', 'Saint-Georges'), ('saint_hyacinthe', 'Saint-Hyacinthe'), ('saint_jean_sur_richelieu', 'Saint-Jean-sur-Richelieu'), ('saint_jerome', 'Saint-Jérôme'), ('saint_john', 'Saint John'), ('saint_joseph_de_beauce', 'Saint-Joseph-de-Beauce'), ('saint_joseph_de_sorel', 'Saint-Joseph-de-Sorel'), ('saint_lambert', 'Saint-Lambert'), ('saint_lazare', 'Saint-Lazare'), ('saint_lin_laurentides', 'Saint-Lin-Laurentides'), ('saint_marc_des_carrieres', 'Saint-Marc-des-Carrières'), ('saint_ours', 'Saint-Ours'), ('saint_pamphile', 'Saint-Pamphile'), ('saint_pascal', 'Saint-Pascal'), ('saint_pie', 'Saint-Pie'), ('saint_raymond', 'Saint-Raymond'), ('saint_remi', 'Saint-Rémi'), ('saint_sauveur', 'Saint-Sauveur'), ('saint_tite', 'Saint-Tite'), ('sainte_adele', 'Sainte-Adèle'), ('sainte_agathe_des_monts', 'Sainte-Agathe-des-Monts'), ('sainte_anne_de_beaupre', 'Sainte-Anne-de-Beaupré'), ('sainte_anne_de_bellevue', 'Sainte-Anne-de-Bellevue'), ('sainte_anne_des_monts', 'Sainte-Anne-des-Monts'), ('sainte_anne_des_plaines', 'Sainte-Anne-des-Plaines'), ('sainte_catherine', 'Sainte-Catherine'), ('sainte_catherine_de_la_jacques_cartier', 'Sainte-Catherine-de-la-Jacques-Cartier'), ('sainte_julie', 'Sainte-Julie'), ('sainte_marguerite_du_lac_masson', 'Sainte-Marguerite-du-Lac-Masson'), ('sainte_marie', 'Sainte-Marie'), ('sainte_marthe_sur_le_lac', 'Sainte-Marthe-sur-le-Lac'), ('sainte_therese', 'Sainte-Thérèse'), ('salaberry_de_valleyfield', 'Salaberry-de-Valleyfield'), ('salmon_arm', 'Salmon Arm'), ('sarnia', 'Sarnia'), ('saskatoon', 'Saskatoon'), ('sault_ste._marie', 'Sault Ste. Marie'), ('schefferville', 'Schefferville'), ('scotstown', 'Scotstown'), ('selkirk', 'Selkirk'), ('senneterre', 'Senneterre'), ('sept_iles', 'Sept-Îles'), ('shawinigan', 'Shawinigan'), ('sherbrooke', 'Sherbrooke'), ('sorel_tracy', 'Sorel-Tracy'), ('spruce_grove', 'Spruce Grove'), ('st_albert', 'St. Albert'), ('st_catharines', 'St. Catharines'), ('st_john_s', "St. John's"), ('st_thomas', 'St. Thomas'), ('stanstead', 'Stanstead'), ('stratford', 'Stratford'), ('steinbach', 'Steinbach'), ('summerside', 'Summerside'), ('surrey', 'Surrey'), ('sutton', 'Sutton'), ('swift_current', 'Swift Current'), ('temiscaming', 'Témiscaming'), ('temiscouata_sur_le_lac', 'Témiscouata-sur-le-Lac'), ('temiskaming_shores', 'Temiskaming Shores'), ('terrace', 'Terrace'), ('terrebonne', 'Terrebonne'), ('thetford_mines', 'Thetford Mines'), ('thompson', 'Thompson'), ('thorold', 'Thorold'), ('thunder_bay', 'Thunder Bay'), ('thurso', 'Thurso'), ('timmins', 'Timmins'), ('toronto', 'Toronto'), ('trail', 'Trail'), ('trois_pistoles', 'Trois-Pistoles'), ('trois_rivieres', 'Trois-Rivières'), ('val_d_or', "Val-d'Or"), ('valcourt', 'Valcourt'), ('vancouver', 'Vancouver'), ('varennes', 'Varennes'), ('vaudreuil_dorion', 'Vaudreuil-Dorion'), ('vaughan', 'Vaughan'), ('vernon', 'Vernon'), ('victoria', 'Victoria'), ('victoriaville', 'Victoriaville'), ('ville_marie', 'Ville-Marie'), ('warman', 'Warman'), ('warwick', 'Warwick'), ('waterloo', 'Waterloo'), ('waterville', 'Waterville'), ('welland', 'Welland'), ('west_kelowna', 'West Kelowna'), ('westmount', 'Westmount'), ('wetaskiwin', 'Wetaskiwin'), ('weyburn', 'Weyburn'), ('white_rock', 'White Rock'), ('whitehorse', 'Whitehorse'), ('williams_lake', 'Williams Lake'), ('windsor', 'Windsor'), ('winkler', 'Winkler'), ('winnipeg', 'Winnipeg'), ('woodstock', 'Woodstock'), ('yellowknife', 'Yellowknife'), ('yorkton', 'Yorkton')], default='montreal', max_length=100, verbose_name='City')),
                ('construction_age', models.CharField(blank=True, choices=[('', 'Select construction age'), ('newly_built', 'Newly built'), ('10_years_and_less', '10 years and less'), ('more_than_10_years', 'More than 10 years')], default='', max_length=50, verbose_name='Construction age')),
                ('cost_per_housing', models.DecimalField(blank=True, decimal_places=0, max_digits=9, null=True, verbose_name='Cost per housing (CPH) ($)')),
                ('createdAt', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('description', models.TextField(verbose_name='Description')),
                ('description_en', models.TextField(null=True, verbose_name='Description')),
                ('description_fr', models.TextField(null=True, verbose_name='Description')),
                ('down_payment_required', models.DecimalField(blank=True, decimal_places=0, max_digits=9, null=True, verbose_name='Down payment required ($)')),
                ('economic_value', models.DecimalField(blank=True, decimal_places=0, max_digits=9, null=True, verbose_name='Economic value ($)')),
                ('gps_latitude', models.FloatField(blank=True, default=46.813878, null=True, verbose_name='Latitude')),
                ('gps_longitude', models.FloatField(blank=True, default=-71.207981, null=True, verbose_name='Longitude')),
                ('gross_revenue_multiplier', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Gross revenue multiplier (GRM)')),
                ('has_dining_room', models.BooleanField(default=False, verbose_name='Dining room')),
                ('has_fireplace', models.BooleanField(default=False, verbose_name='Fireplace')),
                ('has_garage', models.BooleanField(default=False, verbose_name='Garage')),
                ('has_garden', models.BooleanField(default=False, verbose_name='Garden')),
                ('has_swimming_pool', models.BooleanField(default=False, verbose_name='Swimming pool')),
                ('housing_descriptions', models.CharField(blank=True, max_length=1020, null=True, verbose_name='Housing descriptions')),
                ('housing_descriptions_en', models.CharField(blank=True, max_length=1020, null=True, verbose_name='Housing descriptions')),
                ('housing_descriptions_fr', models.CharField(blank=True, max_length=1020, null=True, verbose_name='Housing descriptions')),
                ('image_map', models.ImageField(blank=True, help_text="Item's map's image.", null=True, upload_to='dev/images/item/itemsImages')),
                ('item_id', models.CharField(max_length=255, primary_key=True, serialize=False, unique=True, verbose_name='Id')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is active')),
                ('label', models.CharField(max_length=255, verbose_name='Label')),
                ('label_en', models.CharField(max_length=255, null=True, verbose_name='Label')),
                ('label_fr', models.CharField(max_length=255, null=True, verbose_name='Label')),
                ('lot_size', models.PositiveIntegerField(default=0, verbose_name='Property size(m²)')),
                ('maximum_loan', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Maximum loan (%)')),
                ('net_income_multiplier', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Net income multiplier (NIM)')),
                ('overall_rate_update', models.DecimalField(blank=True, decimal_places=1, max_digits=4, null=True, verbose_name='Overall rate of update (ORU) (%)')),
                ('price', models.DecimalField(decimal_places=0, default=0, max_digits=9, verbose_name='Price')),
                ('property_type', models.CharField(choices=[('', 'Select property type'), ('apartment', 'Apartment'), ('duplex', 'Duplex'), ('quadruplex', 'Quadruplex'), ('quintuplex', 'Quintuplex'), ('multiple_housing', 'Multiple housing'), ('ground_floor_house', 'Ground floor house'), ('two_or_more_storey', 'Two or more storey'), ('split_level', 'Split-level'), ('one_and_a_half_storey_house', 'One-and-a-half-storey house'), ('mobile_home', 'Mobile home'), ('house', 'House'), ('loft_studio', 'Loft / Studio'), ('commercial', 'Commercial'), ('industrial', 'Industrial'), ('company', 'Company (business)'), ('bulk', 'Bulk (block sale)'), ('land', 'Land'), ('lot', 'Lot'), ('farm', 'Farm'), ('hobby_farm', 'Hobby farm'), ('other', 'Other')], default='', max_length=50, verbose_name='Property type')),
                ('short_description', models.CharField(max_length=255, verbose_name='Short description')),
                ('short_description_en', models.CharField(max_length=255, null=True, verbose_name='Short description')),
                ('short_description_fr', models.CharField(max_length=255, null=True, verbose_name='Short description')),
                ('status', models.CharField(choices=[('for_sale', 'For sale'), ('for_rent', 'For rent'), ('sold', 'Sold')], default='for_sale', max_length=50, verbose_name='Status')),
                ('with_map', models.BooleanField(default=False, verbose_name='With map')),
            ],
            options={
                'db_table': 'item',
            },
        ),
        migrations.CreateModel(
            name='ItemImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text="Item's image.", upload_to='dev/images/item/itemsImages')),
                ('item', models.ForeignKey(help_text="Item's image.", on_delete=django.db.models.deletion.CASCADE, related_name='images', to='item.Item')),
            ],
            options={
                'db_table': 'itemimage',
            },
        ),
    ]
